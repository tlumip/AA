package com.hbaspecto.pecas.sd.orm;
import simpleorm.dataset.*;
import simpleorm.utils.*;
import simpleorm.sessionjdbc.SSessionJdbc;
import java.math.BigDecimal;
import java.util.Date;

import com.hbaspecto.pecas.land.Parcels;

/**	Base class of table parcel_cost_xref.<br>
*Do not edit as will be regenerated by running SimpleORMGenerator
*Generated on Fri Sep 25 16:13:29 MDT 2009
***/
abstract class ParcelCostXref_gen extends SRecordInstance implements java.io.Serializable {

   public static final SRecordMeta <ParcelCostXref> meta = new SRecordMeta<ParcelCostXref>(ParcelCostXref.class, "parcel_cost_xref");

//Columns in table
   public static final SFieldLong PecasParcelNum =
      new SFieldLong(meta, "pecas_parcel_num",
         new SFieldFlags[] { SFieldFlags.SPRIMARY_KEY, SFieldFlags.SMANDATORY });

   public static final SFieldInteger CostScheduleId =
      new SFieldInteger(meta, "cost_schedule_id");

   public static final SFieldInteger YearEffective =
      new SFieldInteger(meta, "year_effective",
         new SFieldFlags[] { SFieldFlags.SPRIMARY_KEY, SFieldFlags.SMANDATORY });

//Column getters and setters
   public long get_PecasParcelNum(){ return getLong(PecasParcelNum);}
   public void set_PecasParcelNum( long value){setLong( PecasParcelNum,value);}

   public int get_CostScheduleId(){ return getInt(CostScheduleId);}
   public void set_CostScheduleId( int value){setInt( CostScheduleId,value);}

   public int get_YearEffective(){ return getInt(YearEffective);}
   public void set_YearEffective( int value){setInt( YearEffective,value);}

//Foreign key getters and setters
   public Parcels get_PARCELS(SSessionJdbc ses){
     try{
/** Old code: 
        return Parcels.findOrCreate(get_PecasParcelNum());
New code below :**/
        return ses.findOrCreate(Parcels.meta,new Object[]{ 
        	get_PecasParcelNum(),
 });
     } catch (SException e) {
        if (e.getMessage().indexOf("Null Primary key") > 0) {
          return null;
        }
        throw e;
     }
   }
   public void set_PARCELS( Parcels value){
      set_PecasParcelNum( value.get_PecasParcelNum());
   }

   public TransitionCostCodes get_TRANSITION_COST_CODES(SSessionJdbc ses){
     try{
/** Old code: 
        return TransitionCostCodes.findOrCreate(get_CostScheduleId());
New code below :**/
        return ses.findOrCreate(TransitionCostCodes.meta,new Object[]{ 
        	get_CostScheduleId(),
 });
     } catch (SException e) {
        if (e.getMessage().indexOf("Null Primary key") > 0) {
          return null;
        }
        throw e;
     }
   }
   public void set_TRANSITION_COST_CODES( TransitionCostCodes value){
      set_CostScheduleId( value.get_CostScheduleId());
   }

//Find and create
   public static ParcelCostXref findOrCreate( SSessionJdbc ses ,long _PecasParcelNum, int _YearEffective ){
      return ses.findOrCreate(meta, new Object[] {new Long( _PecasParcelNum), new Integer( _YearEffective)});
   }
   public static ParcelCostXref findOrCreate( SSessionJdbc ses,Parcels _ref, int _YearEffective){
      return findOrCreate( ses, _ref.get_PecasParcelNum(), _YearEffective);
   }

   public SRecordMeta <ParcelCostXref> getMeta() {
       return meta;
   }
}
