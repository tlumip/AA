package com.hbaspecto.pecas.sd.orm;
import simpleorm.dataset.*;
import simpleorm.utils.*;
import simpleorm.sessionjdbc.SSessionJdbc;
import java.math.BigDecimal;
import java.util.Date;

import com.hbaspecto.pecas.land.Parcels;/**	Base class of table local_effect_distances.<br>
*Do not edit as will be regenerated by running SimpleORMGenerator
*Generated on Fri Sep 25 16:13:29 MDT 2009
***/
abstract class LocalEffectDistances_gen extends SRecordInstance implements java.io.Serializable {

   public static final SRecordMeta <LocalEffectDistances> meta = new SRecordMeta<LocalEffectDistances>(LocalEffectDistances.class, "local_effect_distances");

//Columns in table
   public static final SFieldLong PecasParcelNum =
      new SFieldLong(meta, "pecas_parcel_num",
         new SFieldFlags[] { SFieldFlags.SPRIMARY_KEY, SFieldFlags.SMANDATORY });

   public static final SFieldInteger LocalEffectId =
      new SFieldInteger(meta, "local_effect_id",
         new SFieldFlags[] { SFieldFlags.SPRIMARY_KEY, SFieldFlags.SMANDATORY });

   public static final SFieldDouble LocalEffectDistance =
      new SFieldDouble(meta, "local_effect_distance");

   public static final SFieldInteger YearEffective =
      new SFieldInteger(meta, "year_effective",
         new SFieldFlags[] { SFieldFlags.SPRIMARY_KEY, SFieldFlags.SMANDATORY });

//Column getters and setters
   public long get_PecasParcelNum(){ return getLong(PecasParcelNum);}
   public void set_PecasParcelNum( long value){setLong( PecasParcelNum,value);}

   public int get_LocalEffectId(){ return getInt(LocalEffectId);}
   public void set_LocalEffectId( int value){setInt( LocalEffectId,value);}

   public double get_LocalEffectDistance(){ return getDouble(LocalEffectDistance);}
   public void set_LocalEffectDistance( double value){setDouble( LocalEffectDistance,value);}

   public int get_YearEffective(){ return getInt(YearEffective);}
   public void set_YearEffective( int value){setInt( YearEffective,value);}

//Foreign key getters and setters
   public LocalEffects get_LOCAL_EFFECTS(SSessionJdbc ses){
     try{
/** Old code: 
        return LocalEffects.findOrCreate(get_LocalEffectId());
New code below :**/
        return ses.findOrCreate(LocalEffects.meta,new Object[]{ 
        	get_LocalEffectId(),
 });
     } catch (SException e) {
        if (e.getMessage().indexOf("Null Primary key") > 0) {
          return null;
        }
        throw e;
     }
   }
   public void set_LOCAL_EFFECTS( LocalEffects value){
      set_LocalEffectId( value.get_LocalEffectId());
   }

   public Parcels get_PARCELS(SSessionJdbc ses){
     try{
/** Old code: 
        return Parcels.findOrCreate(get_PecasParcelNum());
New code below :**/
        return ses.findOrCreate(Parcels.meta,new Object[]{ 
        	get_PecasParcelNum(),
 });
     } catch (SException e) {
        if (e.getMessage().indexOf("Null Primary key") > 0) {
          return null;
        }
        throw e;
     }
   }
   public void set_PARCELS( Parcels value){
      set_PecasParcelNum( value.get_PecasParcelNum());
   }

//Find and create
   public static LocalEffectDistances findOrCreate( SSessionJdbc ses ,long _PecasParcelNum, int _LocalEffectId, int _YearEffective ){
      return ses.findOrCreate(meta, new Object[] {new Long( _PecasParcelNum), new Integer( _LocalEffectId), new Integer( _YearEffective)});
   }
   public static LocalEffectDistances findOrCreate( SSessionJdbc ses,LocalEffects _ref, long _PecasParcelNum ,int _YearEffective){
      return findOrCreate( ses, _PecasParcelNum, _ref.get_LocalEffectId(), _YearEffective);
   }

   public static LocalEffectDistances findOrCreate( SSessionJdbc ses,Parcels _ref, int _LocalEffectId ,int _YearEffective){
      return findOrCreate( ses, _ref.get_PecasParcelNum(), _LocalEffectId, _YearEffective);
   }

   public SRecordMeta <LocalEffectDistances> getMeta() {
       return meta;
   }
}
